
"""
    @file(path :: AbstractString, source :: AbstractString)

> Generate static documentation from ``source`` and write result to provided file ``path``.

``path`` should be a relative file path and ``source`` should be a string containing
template syntax used to splice in docstrings for objects.

## Template Syntax

``@file`` uses handlebars-like syntax to denote content that must be relaced with docstrings
from the Julia help system.

*Example:*

```julia
using Lexicon

@file "../foobar.md" "

Some text...

{{foobar}}

... and more text.

"
```

The resulting file ``../foobar.md`` will contain the text from the second argument with
``{{foobar}}`` replaced by the contents of whatever docstring ``foobar`` is associated with.

"""
macro file(args...) buildfile(args...) end

buildfile(expr :: Expr)                    = buildfile(expr.args...)
buildfile(path, content :: AbstractString) = buildfile(path, Expr(:string, content))

buildfile(other...) = throw(ArgumentError("Invalid '@file' syntax."))

function buildfile(path, content)
    quote
        open(joinpath(dirname(@__FILE__()), $(esc(path))), "w") do file
            println(" - '$($(esc(path)))'")
            println(file, "<!-- AUTOGENERATED. See 'build.jl' for source. -->")
            $(Expr(:block, map(buildwriter, content.args)...))
        end
    end
end

buildwriter(ex::Expr) = :(print(file, $(esc(ex))))

buildwriter(t::AbstractString) = Expr(:block,
    [buildwriter(p, iseven(n)) for (n, p) in enumerate(split(t, r"{{|}}"))]...
)

function buildwriter(part, isdef)
    isdef || return :(print(file, $(esc(part))))
    Expr(:block, map(writedoc, split(part, "\n", keep = false))...)
end

writedoc(x) = :(writemime(file, "text/plain", @doc($(esc(parse(strip(x)))))))
